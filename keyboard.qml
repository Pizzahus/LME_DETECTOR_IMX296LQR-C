// keyboard.qml (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)

import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.VirtualKeyboard 2.15

Rectangle {
    id: root
    width: parent ? parent.width : 1024
    height: parent ? parent.height / 2 : 300
    color: "transparent"

    signal reqHideKeyboard()
    property var activeField: null

    opacity: activeField !== null ? 1 : 0
    enabled: activeField !== null

    // üëá MouseArea ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö "outside click"
    MouseArea {
        anchors.fill: parent
        propagateComposedEvents: true  // ‡πÉ‡∏´‡πâ event ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á child ‡πÑ‡∏î‡πâ

        onClicked: {
            // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏ö‡∏ô overlayInput ‡∏´‡∏£‡∏∑‡∏≠ InputPanel ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "outside"
            // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡πÉ‡∏ô QML ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‚Üí ‡πÉ‡∏ä‡πâ trick: ‡∏ñ‡πâ‡∏≤ focus ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà overlayInput
            // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ flag ‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏µ‡πà child ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡∏ß‡∏¥‡∏ò‡∏µ‡∏á‡πà‡∏≤‡∏¢‡∏Å‡∏ß‡πà‡∏≤: ‡πÉ‡∏ä‡πâ preventStealing + onReleased

            // ‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ: ‡∏ñ‡πâ‡∏≤ activeField ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ‚Üí ‡∏ã‡πà‡∏≠‡∏ô
            if (root.activeField) {
                root.reqHideKeyboard()
            }
        }

        // üëá ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ MouseArea ‡∏Ç‡πÇ‡∏°‡∏¢ event ‡∏à‡∏≤‡∏Å child (‡πÄ‡∏ä‡πà‡∏ô TextField)
        onPressed: (mouse) => {
            mouse.accepted = true
        }
    }

    InputPanel {
        id: inputPanel
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        visible: activeField !== null

        y: visible ? parent.height - height : parent.height
        Behavior on y { NumberAnimation { duration: 250; easing.type: Easing.InOutQuad } }

        Rectangle {
            width: parent.width
            height: 70
            color: "#222222"
            anchors.bottom: inputPanel.top

            TextField {
                id: overlayInput
                anchors.fill: parent
                anchors.margins: 10
                font.pixelSize: 25
                color: "#222222"
                placeholderText: "‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."
                readOnly: false

                onTextChanged: {
                    if (root.activeField) {
                        root.activeField.setText(text)
                    }
                }

                Keys.onReturnPressed: {
                    root.reqHideKeyboard()
                }
            }
        }
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î field ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô keyboard
    function setActiveField(field) {
        activeField = field
        if (field) {
            overlayInput.text = field.text
            overlayInput.inputMethodHints = field.inputMethodHints
            root.opacity = 1
            root.enabled = true
            overlayInput.forceActiveFocus()
        }
    }

    // function hideKeyboard() {
    //     activeField = null
    //     overlayInput.text = ""
    //     root.opacity = 0
    //     root.enabled = false
    // }
}