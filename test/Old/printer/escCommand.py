import serial

# ตั้งค่าพอร์ตอนุกรม (COM) และ baudrate
ser = serial.Serial("COM19", 9600)  # เปลี่ยน 'COM3' เป็นพอร์ตของคุณ

# พจนานุกรมที่จับคู่คำสั่ง ESC/POS กับไบต์โค้ด
esc_pos_commands = {
    # รีเซ็ตเครื่องพิมพ์
    "ESC @": "\x1B\x40",  # รีเซ็ตเครื่องพิมพ์กลับสู่สถานะเริ่มต้น
    # ตัวหนา
    "ESC E 1": "\x1B\x45\x01",  # เปิดใช้งานตัวหนา
    "ESC E 0": "\x1B\x45\x00",  # ปิดใช้งานตัวหนา
    # จัดตำแหน่งข้อความ
    "ESC a 0": "\x1B\x61\x00",  # จัดข้อความชิดซ้าย
    "ESC a 1": "\x1B\x61\x01",  # จัดข้อความให้อยู่กลาง
    "ESC a 2": "\x1B\x61\x02",  # จัดข้อความชิดขวา
    # ขนาดตัวอักษร
    "ESC M 0": "\x1B\x4D\x00",  # เลือกขนาดตัวอักษรปกติ
    "ESC M 1": "\x1B\x4D\x01",  # เลือกขนาดตัวอักษรใหญ่
    # เน้นข้อความ
    "ESC ! 0": "\x1B\x21\x00",  # ปกติ (ไม่มีการเน้น)
    "ESC ! 1": "\x1B\x21\x08",  # เน้น (ขีดเส้นใต้)
    "ESC ! 2": "\x1B\x21\x10",  # เน้น (ตัวอักษรใหญ่ขึ้น)
    "ESC ! 3": "\x1B\x21\x20",  # เน้น (ตัวอักษรขยายแนวตั้ง)
    "ESC ! 4": "\x1B\x21\x30",  # เน้น (ตัวอักษรขยายทั้งแนวตั้งและแนวนอน)
    # ตัดกระดาษ
    "GS V 0": "\x1D\x56\x00",  # ตัดกระดาษทั้งหมด
    "GS V 1": "\x1D\x56\x01",  # ตัดกระดาษบางส่วน
    # พิมพ์บาร์โค้ด
    "GS k 4": "\x1D\x6B\x04",  # พิมพ์บาร์โค้ด UPC-A
    "GS k 5": "\x1D\x6B\x05",  # พิมพ์บาร์โค้ด UPC-E
    "GS k 6": "\x1D\x6B\x06",  # พิมพ์บาร์โค้ด EAN13
    "GS k 7": "\x1D\x6B\x07",  # พิมพ์บาร์โค้ด EAN8
    "GS k 8": "\x1D\x6B\x08",  # พิมพ์บาร์โค้ด CODE39
    "GS k 9": "\x1D\x6B\x09",  # พิมพ์บาร์โค้ด ITF
    "GS k 10": "\x1D\x6B\x0A",  # พิมพ์บาร์โค้ด CODABAR
    "GS k 12": "\x1D\x6B\x0C",  # พิมพ์บาร์โค้ด CODE128
    # เลื่อนบรรทัด
    "LF": "\x0A",  # เลื่อนบรรทัด
    # เลื่อนกระดาษขึ้นตามหน่วย
    "ESC J n": "\x1B\x4A",  # เลื่อนกระดาษขึ้น n หน่วย
    # เลื่อนกระดาษลงตามจำนวนบรรทัด
    "ESC d n": "\x1B\x64",  # เลื่อนกระดาษลง n บรรทัด
    # ตั้งค่าช่องว่างระหว่างบรรทัด
    "ESC 2": "\x1B\x32",  # ตั้งค่าช่องว่างระหว่างบรรทัดเป็นค่าเริ่มต้น
    "ESC 3 n": "\x1B\x33",  # ตั้งค่าช่องว่างระหว่างบรรทัดเป็น n หน่วย
    # กำหนดความยาวข้อมูลที่ต้องพิมพ์
    "GS L nL nH": "\x1D\x4C",  # กำหนดความยาวของข้อมูลที่ต้องพิมพ์
    # พิมพ์กราฟิกแบบบิทแมป
    "DC2 k m": "\x12\x6B",  # พิมพ์ข้อมูลกราฟิกที่เป็นภาพบิทแมป
    # ส่งคำขอสอบถามสถานะเครื่องพิมพ์
    "DLE EOT 1": "\x10\x04\x01",  # ตรวจสอบสถานะเครื่องพิมพ์
    "DLE EOT 2": "\x10\x04\x02",  # ตรวจสอบสถานะตัวเก็บกระดาษ
}


# ฟังก์ชันสำหรับแปลงคำสั่ง ESC/POS
def convert_command(command_str):
    return esc_pos_commands.get(command_str, "")


# ฟังก์ชันสำหรับส่งคำสั่งไปยังเครื่องพิมพ์
def send_command(command_str):
    command_bytes = convert_command(command_str)
    if command_bytes:
        ser.write(command_bytes.encode("tis-620"))
    else:
        ser.write(command_str.encode("tis-620"))  # ส่งสตริงโดยตรงหากไม่พบในพจนานุกรม


# ตัวอย่างการใช้งาน
send_command("ESC @")  # รีเซ็ตเครื่องพิมพ์
send_command("ESC E 1")  # เปิดตัวหนา
send_command("ESC M 1")  # เปิดตัวหนา
send_command("Hello, world!\n")  # พิมพ์ข้อความ
send_command("ESC E 0")  # ปิดตัวหนา
send_command("GS V 0")  # ตัดกระดาษ

# ปิดการเชื่อมต่อเมื่อเสร็จสิ้น
ser.close()
